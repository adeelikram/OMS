<!-- Footer -->
<div class="dashboard-footer-spacer"></div>
<div class="small-footer margin-top-15">
    <div class="small-footer-copyrights"> &copy;
        <script>  document.write(new Date().getFullYear());</script>
        <strong>OMS ðŸš€</strong>. All Rights Reserved.
    </div>
    <div class="clearfix"></div>
</div>
<!-- Footer / End -->

<!-- </div> -->
</div>
<!-- Dashboard Content / End -->

</div>
<!-- Dashboard Container / End -->

</div>
<!-- Wrapper / End -->
<!-- Scripts
================================================== -->

<!-- dismissible alerts -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js"
    integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"
    crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js"
    integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k"
    crossorigin="anonymous"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="/js/jquery-3.3.1.min.js"></script>
<script src="/js/jquery-migrate-3.0.0.min.js"></script>
<script src="/js/mmenu.min.js"></script>
<script src="/js/tippy.all.min.js"></script>
<script src="/js/simplebar.min.js"></script>
<script src="/js/bootstrap-slider.min.js"></script>
<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/snackbar.js"></script>
<script src="/js/clipboard.min.js"></script>
<script src="/js/counterup.min.js"></script>
<script src="/js/magnific-popup.min.js"></script>
<script src="/js/slick.min.js"></script>
<script src="/js/custom.js"></script>
<script src="/js/chart.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
    function printPopUp() {
        alert("Send shipment?")
        // window.print();
    }
</script>
<script>
    function hideRoomateHyraDivFunc() {
        var x = document.getElementById("hide_roomate_hyra_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideRoomateSaldDivFunc() {
        var x = document.getElementById("hide_roomate_sald_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideNucleusOngoingProjectDivFunc() {
        var x = document.getElementById("hide_nucleus_ongoing_project_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideNeatSeatOngoingProjectDivFunc() {
        var x = document.getElementById("hide_neatseat_ongoing_project_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideSitShowerSaldDivFunc() {
        var x = document.getElementById("hide_sit_shower_sald_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideSitShowerHyraDivFunc() {
        var x = document.getElementById("hide_sit_shower_hyra_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideRoomatePlaceOfDeliverydDivFunc() {
        var x = document.getElementById("hide_roomate_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideRoomatePlaceOfDeliverydDivFuncSold() {
        var x = document.getElementById("hide_roomate_place_div_sold");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideNucleusPlaceDivFunc() {
        var x = document.getElementById("hide_nucleus_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideSitShowerRentPlaceDivFunc() {
        var x = document.getElementById("hide_sit_shower_rent_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideSitShowerSoldPlaceDivFunc() {
        var x = document.getElementById("hide_sit_shower_sold_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideNeatSeatLPlaceDivFunc() {
        var x = document.getElementById("hide_neatseat_l_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }
    function hideNeatSeatMPlaceDivFunc() {
        var x = document.getElementById("hide_neatseat_m_place_div");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    function toggleCollapse(id) {
        var x = document.getElementById(id);
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }

    function hasLength(obj) {
        if (!obj) return null;
        return Object.keys(obj).length > 0;
    }

    function getFormValues(id, params = { debug: false, accessories: true }) {
        const elems = document.querySelectorAll(`[name^="${id}_"]`);

        const accessoryEntries = [];
        const entries = [];

        elems.forEach(e => {
            let arr = entries, split = `${id}_`;

            if (params.accessories && e.name.includes('_accessories_')) {
                arr = accessoryEntries;
                split = '_accessories_';
            }

            const name = e.name.split(split)[1];

            if (e.value === "") return;

            arr.push([name, e.value])
        })


        const accessories = Object.fromEntries(accessoryEntries);
        const object = { ...Object.fromEntries(entries) };

        if (Object.keys(accessories).length) object.accessories = accessories;

        return object;
    }

    async function handleSubmitAddOrder({ editing, id }) {
        const body = getFormValues('order');

        const roomMate = getFormValues('roomMate'),
            nucleus = getFormValues('nucleus'),
            neatseat = getFormValues('neatseat'),
            sitShower = getFormValues('sitShower'),
            otium = getFormValues('otium'),
            assistant = getFormValues('orderAssistant');

        if (roomMate) body.roomMate = roomMate;
        if (nucleus) body.nucleus = nucleus;
        if (neatseat) body.neatseat = neatseat;
        if (sitShower) body.sitShower = sitShower;
        if (otium) body.otium = otium;

        if (hasLength(assistant)) body.assistant = assistant;

        try {
            let path = '/add-order';

            if (editing) {
                path = '/post-edit-order';
                body.id = id;
            }

            await axios.post(path, body);

            window.location = "/";
        } catch (err) {
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function sendFortConfig() {
        var el = document.querySelectorAll("#oms-col > li")
        let keys = []
        let obj = {}
        el.forEach(v => {
            keys.push(...v.innerText.split("\n"))
        })
        el = document.querySelectorAll(".oms-fort-select")
        for (var i = 0; i < el.length; i++) {
            obj[keys[i]] = el[i].value
        }
        await axios.post("/fortnox-prods", obj)
        alert("Configuration saved successfully!")
    }

    async function handleSubmitSendOrder({ editing, id, save }) {
        const body = getFormValues('order');

        var roomMateRent = getFormValues('roomMateRent'),
            nucleus = getFormValues('nucleus'),
            neatseat = getFormValues('neatseat'),
            sitShowerRent = getFormValues('sitShowerRent'),
            otium = getFormValues('otium'),
            assistant = getFormValues('orderAssistant');





        if (roomMateRent) {
            roomMateRent = { units: roomMateRent.units, ...roomMateRent.accessories }
            body.roomMateRent = roomMateRent
        }
        if (nucleus) {
            nucleus = { units: nucleus.units, ...nucleus.accessories }
            body.nucleus = nucleus
        }
        if (neatseat) {
            neatseat = { units: neatseat.units, ...neatseat.accessories }
            body.neatseat = neatseat
        }
        if (sitShowerRent) {
            sitShowerRent = { units: sitShowerRent.units, ...sitShowerRent.accessories }
            body.sitShowerRent = sitShowerRent
        }
        if (otium) {
            otium = { units: otium.units, ...otium.accessories }
            body.otium = otium
        }

        if (hasLength(assistant)) body.assistant = assistant;
        if (save) body.save = save;


        try {
            let path = '/send-order';

            if (editing) {
                path = '/edit-send-order';
                body.id = id;
            }

            var res = await axios.post(path, body);
            if(res.data.ErrorInformation) alert("can't send data. Maybe fortnox access token has been expired")   
            else if (save) alert("Successfully saved in database!")
            else alert("Successfully sent to Fortnox!")
        
        } catch (err) {
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }



    const educationProductNames = ['roomMate', 'nucleus', 'sitShower', 'neatseat'];

    async function handleSubmitDelivery({ editing, order, deliveryId }) {
        const body = getFormValues('delivery');

        body.orderId = order._id;

        const roomMate = getFormValues('roomMate');
        if (roomMate.units) body.roomMate = roomMate;

        const nucleus = getFormValues('nucleus');
        if (nucleus.units) body.nucleus = nucleus;

        const neatseat = getFormValues('neatseat');
        if (neatseat.large || neatseat.medium) body.neatseat = neatseat;

        const sitShower = getFormValues('sitShower');
        if (sitShower.units) body.sitShower = sitShower;

        const otium = getFormValues('otium');
        if (otium.units) body.otium = otium;

        body.testing = getFormValues('deliveryTesting', { accessories: false });

        const otherInstaller = getFormValues('deliveryOtherInstaller', { accessories: false });
        if (hasLength(otherInstaller)) body.otherInstaller = otherInstaller;

        const plumbingFitter = getFormValues('deliveryPlumbingFitter', { accessories: false });
        if (hasLength(plumbingFitter)) body.plumbingFitter = plumbingFitter;

        const electrician = getFormValues('deliveryElectrician', { accessories: false });
        if (hasLength(electrician)) body.electrician = electrician;

        educationProductNames.forEach((p) => {
            const product = getFormValues(`deliveryEducation${p}`);
            const admin = getFormValues(`deliveryEducation${p}Admin`);
            if (admin) product.admin = admin;
            if (hasLength(product)) {
                if (!body.education) body.education = {};
                body.education[p] = product;
            }
        })

        const designVisit = getFormValues('deliveryDesignVisit');

        const examineAllRooms = getFormValues('deliveryDesignVisitExamineAllRooms');
        if (hasLength(examineAllRooms)) designVisit.examineAllRooms = examineAllRooms;

        const completed = getFormValues('deliveryDesignVisitCompleted');
        if (hasLength(examineAllRooms)) designVisit.completed = completed;

        const phoneWorks = getFormValues('deliveryDesignVisitPhoneWorks');
        if (hasLength(phoneWorks)) designVisit.phoneWorks = phoneWorks;

        if (hasLength(designVisit)) body.designVisit = designVisit;

        const installation = getFormValues('deliveryInstallation');
        if (hasLength(installation)) body.installation = installation;

        let url = '/post-add-place-of-delivery';

        if (editing) {
            url = '/post-edit-place-of-delivery';
            body.deliveryId = deliveryId;
        }


        const contractors = [];

        if (body.electrician) contractors.push({ ...body.electrician, contractor: body.electrician.name, customer: body.customer });
        if (body.otherInstaller) contractors.push({ ...body.otherInstaller, contractor: body.otherInstaller.name, customer: body.customer });
        if (body.plumbingFitter) contractors.push({ ...body.plumbingFitter, contractor: body.plumbingFitter.name, customer: body.customer });

        const promises = contractors.map(c => axios.post("/post-create-contractor", c));

        await Promise.all([axios.post(url, body), ...promises]);

        window.location = "/";
    }

    async function handleSubmitConfigureActiveUnits({ deliveryId, product, unit, activeUnits }) {
        const count = product[unit || 'units'].bought;
        const body = [];

        for (let i = 0; i < count; i++) {
            body.push(getFormValues(`activeUnits${i}`))
        }

        function redirect() {
            window.location = `/get-edit-place-of-delivery/${deliveryId}?edit=true`;
        }

        await axios.post(`/post-configure-active-units/${product.value}${unit ? `-${unit}` : ''}/${deliveryId}`, body);

        redirect();
    }

    async function handleSubmitWorkOrder() {
        const body = getFormValues('workOrder');

        const responsible = getFormValues('workOrderResponsible');
        if (hasLength(responsible)) body.responsible = responsible;

        const customer = getFormValues('workOrderCustomer');
        if (hasLength(customer)) body.customer = customer;

        const customerAddress = getFormValues('workOrderCustomerAddress');
        if (hasLength(customerAddress)) body.customerAddress = customerAddress;

        const responsibleAddress = getFormValues('workOrderResponsibleAddress');
        if (hasLength(responsibleAddress)) body.responsibleAddress = responsibleAddress;

        await axios.post('/work-orders', body).catch(err => console.error(err))

        window.location = "/work-orders";
    }

    async function handleSubmitAddEmployee({ editing, id }) {
        let body = getFormValues('employee');

        const username = document.getElementById("employee_username").value,
            name = document.getElementById('employee_name').value,
            address = document.getElementById('employee_address').value,
            postNumber = document.getElementById('employee_postnumber').value,
            phoneNumber = document.getElementById('employee_phonenumber').value,
            postAddress = document.getElementById('employee_postaddress').value,
            accountNumber = document.getElementById('employee_accountnumber').value,
            bank = document.getElementById('employee_bank').value,
            clearing = document.getElementById('employee_clearing').value,
            jobType = document.getElementById('employee_jobtype').value,
            vaccations = document.getElementById('employee_vaccations').value

        body = {
            ...body,
            username,
            name,
            address,
            postNumber,
            phoneNumber,
            postAddress,
            accountNumber,
            bank,
            clearing,
            jobType,
            vaccations
        }
        console.log(body);

        try {
            let path = '/add-employee-info';

            if (editing) {
                path = '/edit-employee-information';
                body.id = id;
            }

            await axios.post(path, body);

            window.location = "/employee-information";
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitAbsentReport() {
        let body = getFormValues('absent');

        const type = document.getElementById("absent_type").value,
            from = document.getElementById('absent_from').value,
            to = document.getElementById('absent_to').value

        body = {
            ...body,
            type,
            from,
            to
        }
        console.log(body);

        try {
            let path = '/add-employee-absent-report';

            await axios.post(path, body);

            window.location = "/employee-absent-reports";
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitMilage() {
        let body = getFormValues('absent');

        const date = document.getElementById("milage_date").value,
            kilometer = document.getElementById('milage_kilometer').value

        body = {
            ...body,
            date,
            kilometer
        }
        console.log(body);

        try {
            let path = '/add-employee-milage';

            await axios.post(path, body);

            window.location = "/employee-milages";
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitHourlyReview() {
        let body = getFormValues('hourly');

        const date = document.getElementById("hourly_date").value,
            hours = document.getElementById('hourly_hours').value

        body = {
            ...body,
            date,
            hours
        }
        console.log(body);

        try {
            let path = '/add-employee-hourly-review';

            await axios.post(path, body);

            window.location = "/employee-hourly-reviews";
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitAdminEditEmployee({ editing, id }) {
        let body = getFormValues('employee');

        const jobType = document.getElementById('employee_jobtype').value,
            vaccations = document.getElementById('employee_vaccations').value

        body = {
            ...body,
            jobType,
            vaccations
        }
        console.log(body);

        try {
            let path = '/admin/edit-employee-info';

            if (editing) {
                path = '/admin/edit-employee-info';
                body.id = id;
            }

            await axios.post(path, body);

            window.location = `/admin/employee-history/${id}`;
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitApproval({ month, employeeId }) {
        let body = {
            month,
            employeeId
        }
        console.log(body);

        try {
            let path = '/admin/approve-employee-month';

            await axios.post(path, body);

            window.location = `/admin/employee-history/${employeeId}/${month}`;
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitSyncCustomers({ customers }) {
        let body = getFormValues('employee');

        const synced = Array.from(document.querySelectorAll('input#customer_synced')).map(i => i.checked);
        for (let i = 0; i < customers.length; i++) {
            customers[i].synced = synced[i];
        }

        customers = customers.filter(i => i.synced);

        body = {
            ...body,
            customers
        }
        console.log(body);

        try {
            let path = '/admin/sync';

            await axios.post(path, body);

            window.location = `/admin/hubspot`;
        } catch (err) {
            console.log(err);
            alert('Please fill all the required fields')
            console.error(err.response.data);
        }
    }

    async function handleSubmitAddTender() {
        const body = getFormValues('tender');

        if (body.information) body.information = body.information.trim();
        if (body.requirements) body.requirements = body.requirements.trim();


        await axios.post('/post-create-tender', body).catch(err => console.error(err))

        window.location = "/tenders";
    }

    async function handleEditTender(id) {
        const body = getFormValues('tender');

        if (body.information) body.information = body.information.trim();
        if (body.requirements) body.requirements = body.requirements.trim();

        await axios.post('/post-edit-tender', body).catch(err => console.error(err))

        window.location = "/tenders";
    }

    async function handleSaveTenderInformation(tenderId) {
        const information = document.getElementById(`${tenderId}_information`).value;
        
        await axios.post(`/post-create-tender-information/${tenderId}`, { information }).catch(err => console.error(err));
    }

    function renderFieldByTrackType(type) {
        const ongoingProjects = document.getElementById("ongoing_projects_div");
        const customers = document.getElementById("customers_div");

        switch (type) {
            case "task": {
                ongoingProjects.style.display = "none";
                customers.style.display = "none";

                break;
            }
            case "customer": {
                ongoingProjects.style.display = "none";
                customers.style.display = "block";
                break;
            }
            case "project": {
                ongoingProjects.style.display = "block";
                customers.style.display = "none";
                break;
            }
            default: {
                break;
            }
        }
        
    }

    function handleChangeType() {
        const element = document.getElementById('timeTrack_type');
        const value = element.value;

        renderFieldByTrackType(value);
    }

    async function handleAddTimeTrack() {
        const body = getFormValues('timeTrack');

        switch (body.type) {
            case "task": {
                delete body.customer;
                delete body.project;
                break;
            }
            case "customer": {
                delete body.project;
                break;
            }
            case "project": {
                delete body.customer;
                break;
            }
            default: {
                break;
            }
        }

        console.log(body);

        await axios.post('/post-create-time-track', body).catch(err => console.error(err))

        window.location = "/time-tracker";

    }

    async function handleAddContractor() {
        const body = getFormValues('contractor');
        const neatseat = document.getElementById('contractor_neatseat').checked;

        body.neatseat = neatseat;

        await axios.post('/post-create-contractor', body).catch(err => console.error(err))

        window.location = "/contractors";

    }


</script>
</body>

</html>